{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///Users/tuna/Desktop/healthhack/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport Groq from 'groq-sdk';\n\n// Initialize Groq client\nconst groq = new Groq({\n  apiKey: process.env.GROQ_API_KEY,\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { message, transcript, currentTime, videoDuration } = await request.json();\n\n    if (!message || !transcript) {\n      return NextResponse.json(\n        { error: 'Message and transcript are required' },\n        { status: 400 }\n      );\n    }\n\n    // Filter transcript to only include content up to current pause time\n    const relevantTranscript = transcript.filter((item: any) =>\n      item.timestamp <= currentTime\n    );\n\n    // Create context from relevant transcript\n    const context = relevantTranscript\n      .map((item: any) => `[${formatTime(item.timestamp)}] ${item.text}`)\n      .join('\\n');\n\n    // Create the prompt for Groq\n    const systemPrompt = `You are a helpful medical assistant helping a patient understand medical instructions from their doctor.\nThe patient is watching a video with medical instructions and has paused at ${formatTime(currentTime)} out of ${formatTime(videoDuration)} total.\n\nHere is the transcript of what the patient has watched so far:\n${context}\n\nPlease answer the patient's question based only on the content they have watched up to this point.\nBe clear, concise, and use simple language that a patient can easily understand.\nIf the question is about something that hasn't been covered yet in the video, kindly let them know they should continue watching.`;\n\n    // Call Groq API\n    const completion = await groq.chat.completions.create({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: message }\n      ],\n      model: 'llama-3.3-70b-versatile',\n      temperature: 0.7,\n      max_tokens: 500,\n    });\n\n    const response = completion.choices[0]?.message?.content || 'I apologize, but I couldn\\'t generate a response. Please try again.';\n\n    return NextResponse.json({ response });\n  } catch (error) {\n    console.error('Error in chat API:', error);\n    return NextResponse.json(\n      { error: 'Failed to process chat request' },\n      { status: 500 }\n    );\n  }\n}\n\n// Helper function to format time in MM:SS\nfunction formatTime(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,yBAAyB;AACzB,MAAM,OAAO,IAAI,2NAAI,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,YAAY;AAClC;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9E,IAAI,CAAC,WAAW,CAAC,YAAY;YAC3B,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,qEAAqE;QACrE,MAAM,qBAAqB,WAAW,MAAM,CAAC,CAAC,OAC5C,KAAK,SAAS,IAAI;QAGpB,0CAA0C;QAC1C,MAAM,UAAU,mBACb,GAAG,CAAC,CAAC,OAAc,CAAC,CAAC,EAAE,WAAW,KAAK,SAAS,EAAE,EAAE,EAAE,KAAK,IAAI,EAAE,EACjE,IAAI,CAAC;QAER,6BAA6B;QAC7B,MAAM,eAAe,CAAC;4EACkD,EAAE,WAAW,aAAa,QAAQ,EAAE,WAAW,eAAe;;;AAG1I,EAAE,QAAQ;;;;iIAIuH,CAAC;QAE9H,gBAAgB;QAChB,MAAM,aAAa,MAAM,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACpD,UAAU;gBACR;oBAAE,MAAM;oBAAU,SAAS;gBAAa;gBACxC;oBAAE,MAAM;oBAAQ,SAAS;gBAAQ;aAClC;YACD,OAAO;YACP,aAAa;YACb,YAAY;QACd;QAEA,MAAM,WAAW,WAAW,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;QAE5D,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiC,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,0CAA0C;AAC1C,SAAS,WAAW,OAAe;IACjC,MAAM,UAAU,KAAK,KAAK,CAAC,UAAU;IACrC,MAAM,mBAAmB,KAAK,KAAK,CAAC,UAAU;IAC9C,OAAO,GAAG,QAAQ,QAAQ,GAAG,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,iBAAiB,QAAQ,GAAG,QAAQ,CAAC,GAAG,MAAM;AACjG","debugId":null}}]
}