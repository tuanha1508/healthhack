{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/tuna/Desktop/healthhack/frontend/app/api/transcribe/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Note: In production, you should store this in environment variables\nconst GROQ_API_KEY = process.env.GROQ_API_KEY || '';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const audioFile = formData.get('audio') as File;\n\n    if (!audioFile) {\n      return NextResponse.json(\n        { error: 'No audio file provided' },\n        { status: 400 }\n      );\n    }\n\n    if (!GROQ_API_KEY) {\n      // For demo purposes, return mock transcription with timestamps\n      const mockTranscription = [\n        { start: 0.0, end: 2.5, text: \"Hello, this is Dr. Smith.\" },\n        { start: 2.5, end: 5.0, text: \"Today we'll practice a memory exercise.\" },\n        { start: 5.0, end: 8.0, text: \"Please watch carefully and follow along.\" },\n        { start: 8.0, end: 11.0, text: \"First, I want you to look at these objects.\" },\n        { start: 11.0, end: 14.0, text: \"Try to remember them in order.\" },\n        { start: 14.0, end: 17.0, text: \"We'll review them together at the end.\" },\n        { start: 17.0, end: 20.0, text: \"Take your time and don't rush.\" }\n      ];\n\n      return NextResponse.json({\n        transcription: mockTranscription,\n        warning: 'Using mock data. Set GROQ_API_KEY for real transcription.'\n      });\n    }\n\n    // Convert audio file to base64 for Groq API\n    const arrayBuffer = await audioFile.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    const base64Audio = buffer.toString('base64');\n\n    // Call Groq API for transcription\n    const groqResponse = await fetch('https://api.groq.com/openai/v1/audio/transcriptions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${GROQ_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        file: base64Audio,\n        model: 'whisper-large-v3',\n        response_format: 'verbose_json',\n        timestamp_granularities: ['segment', 'word']\n      })\n    });\n\n    if (!groqResponse.ok) {\n      throw new Error('Failed to transcribe audio');\n    }\n\n    const data = await groqResponse.json();\n\n    // Format the transcription with timestamps\n    const formattedTranscription = data.segments?.map((segment: any) => ({\n      start: segment.start,\n      end: segment.end,\n      text: segment.text.trim()\n    })) || [];\n\n    return NextResponse.json({ transcription: formattedTranscription });\n\n  } catch (error) {\n    console.error('Transcription error:', error);\n    return NextResponse.json(\n      { error: 'Failed to transcribe audio' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,sEAAsE;AACtE,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY,IAAI;AAE1C,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,YAAY,SAAS,GAAG,CAAC;QAE/B,IAAI,CAAC,WAAW;YACd,OAAO,+QAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,cAAc;YACjB,+DAA+D;YAC/D,MAAM,oBAAoB;gBACxB;oBAAE,OAAO;oBAAK,KAAK;oBAAK,MAAM;gBAA4B;gBAC1D;oBAAE,OAAO;oBAAK,KAAK;oBAAK,MAAM;gBAA0C;gBACxE;oBAAE,OAAO;oBAAK,KAAK;oBAAK,MAAM;gBAA2C;gBACzE;oBAAE,OAAO;oBAAK,KAAK;oBAAM,MAAM;gBAA8C;gBAC7E;oBAAE,OAAO;oBAAM,KAAK;oBAAM,MAAM;gBAAiC;gBACjE;oBAAE,OAAO;oBAAM,KAAK;oBAAM,MAAM;gBAAyC;gBACzE;oBAAE,OAAO;oBAAM,KAAK;oBAAM,MAAM;gBAAiC;aAClE;YAED,OAAO,+QAAY,CAAC,IAAI,CAAC;gBACvB,eAAe;gBACf,SAAS;YACX;QACF;QAEA,4CAA4C;QAC5C,MAAM,cAAc,MAAM,UAAU,WAAW;QAC/C,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,MAAM,cAAc,OAAO,QAAQ,CAAC;QAEpC,kCAAkC;QAClC,MAAM,eAAe,MAAM,MAAM,uDAAuD;YACtF,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,cAAc;gBACzC,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,MAAM;gBACN,OAAO;gBACP,iBAAiB;gBACjB,yBAAyB;oBAAC;oBAAW;iBAAO;YAC9C;QACF;QAEA,IAAI,CAAC,aAAa,EAAE,EAAE;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,aAAa,IAAI;QAEpC,2CAA2C;QAC3C,MAAM,yBAAyB,KAAK,QAAQ,EAAE,IAAI,CAAC,UAAiB,CAAC;gBACnE,OAAO,QAAQ,KAAK;gBACpB,KAAK,QAAQ,GAAG;gBAChB,MAAM,QAAQ,IAAI,CAAC,IAAI;YACzB,CAAC,MAAM,EAAE;QAET,OAAO,+QAAY,CAAC,IAAI,CAAC;YAAE,eAAe;QAAuB;IAEnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,+QAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}